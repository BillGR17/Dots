#!/usr/bin/env python
import os
import sys

PROTON_PATH = ""
PROTON_PREFIX = ""


def find(name, path):
    """
        Recursive search for file
        since glob is extremely slow
        i think this is the best way
    """
    result = []
    for root, dirs, files in os.walk(path):
        if name in files:
            result.append(os.path.join(root, name))
    return result


def find_proton():
    """
        Grab all the proton
        searchSteamLibs contains all the
        paths to search for the proton file
    """
    searchSteamLibs = [os.path.expanduser("~") + "/.local/share/Steam", "/mnt"]
    protonList = []
    for x in searchSteamLibs:
        protonList.extend(find("proton", x))
    return protonList


def check_prev_run(loc):
    """
        Check if .proton folder exist
        Then check if last proton exec still exist
        and use it or perform new run
    """
    global PROTON_PATH
    global PROTON_PREFIX
    path = loc + "/.proton/last"
    print("Checking for previous proton run: " + path)
    exists = os.path.isfile(path)
    if exists:
        file = open(path, "r")
        # remove all breaklines
        lastFile = file.read().replace("\n", "")
        lastProton = os.path.isfile(lastFile + "/proton")
        PROTON_PREFIX = loc + "/.proton/" + lastFile.split("/").pop().split(
            " ").pop()
        if lastProton:
            print("Found last Proton used: " + lastFile)
            set_env(PROTON_PREFIX, lastFile)
            PROTON_PATH = lastFile
        else:
            print("Couldn't find the proton used last time : " + lastFile)
            new_run(loc)
            set_env(PROTON_PREFIX)
    else:
        print("No Previous run\nCreating new prefix")
        new_run(loc)
        PROTON_PREFIX = loc + "/.proton/" + PROTON_PATH.split("/").pop().split(
            " ").pop()
        set_env(PROTON_PREFIX, PROTON_PATH)


def new_run(loc):
    """
        Creates all .proton folders and files
        asks user what proton to use
    """
    global PROTON_PATH
    protonsFound = find_proton()
    for i, text in enumerate(protonsFound):
        print("[%s]%s" % (i, text))
    userInput = int(input("Select Proton Version to use: "))
    PROTON_PATH = "/".join(protonsFound[userInput].split("/")[:-1])
    if not os.path.exists(loc + "/.proton"):
        os.makedirs(loc + "/.proton")
    open(loc + "/.proton/last", "w").write(PROTON_PATH)
    protonPrefix = loc + "/.proton/" + PROTON_PATH.split("/").pop().split(
        " ").pop()
    if not os.path.exists(protonPrefix):
        os.makedirs(protonPrefix)


def set_env(prefix, proton):
    """
        Sets all the enviroment variables
    """
    print("PROTON_PREFIX:", PROTON_PREFIX)
    os.environ["PROTON_PREFIX"] = PROTON_PREFIX
    os.environ["STEAM_COMPAT_DATA_PATH"] = PROTON_PREFIX
    os.environ["WINEPREFIX"] = PROTON_PREFIX
    os.environ["WINE"] = proton + "/dist/bin/wine"
    os.environ["WINEARCH"] = "win64"
    os.environ["WINESERVER"] = PROTON_PREFIX + "/dist/bin/wineserver"


def run(loc):
    if loc == "":
        loc = os.getcwd()
    check_prev_run(loc)
    _exec = "'" + PROTON_PATH + "/proton' run '" + sys.argv[
        1] + "' " + " ".join(sys.argv[2:])
    print("Executing: " + _exec)
    os.system(_exec)


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if ".exe" in sys.argv[1]:
            run("/".join(sys.argv[1].split("/")[:-1]))
        elif "wine" in sys.argv[1]:
            run("")
        else:
            print("Not sure what you are trying to do  right now...")
    else:
        print("Run this script with an argumeny,\nLike this: " + sys.argv[0] +
              " game.exe")
