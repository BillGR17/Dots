#!/usr/bin/env python
import os
import sys
import shutil

PROTON_PREFIX = ""
PROTON_PATH = ""


def ifError(target, msg, code):
    if not target:
        print(msg)
        sys.exit(code)


def inputLoop(msg, inp_min, inp_max):
    loop = True
    r_value = 0
    while (loop):
        userInput = int(input(msg))
        if userInput >= inp_min and userInput <= inp_max:
            loop = False
            r_value = userInput
    return (r_value - 1)


def find(name, path):
    """
        Recursive search for file
        since glob is extremely slow
        i think this is the best way
    """
    result = []
    for root, dirs, files in os.walk(path):
        if name in files:
            result.append(os.path.join(root, name))
    return result


def find_proton():
    """
        Grab all the proton
        searchSteamLibs contains all the
        paths to search for the proton file
    """
    print("Searching for Any Installed Proton...")
    if os.path.isfile(os.path.expanduser("~") + "/.config/proton/conf"):
        conf = open(os.path.expanduser("~") + "/.config/proton/conf")
        searchSteamLibs = conf.read().split("\n")
        print("Found ~/.config/proton/conf\nProton path[s]:", searchSteamLibs)
    else:
        print("Couldn't find ~/.config/proton/conf\nDefault path .local/share/Steam")
        searchSteamLibs = [os.path.expanduser("~") + "/.local/share/Steam"]
    protonList = []
    for x in searchSteamLibs:
        protonList.extend(find("proton", x))
    ifError(protonList, "No Proton found", 1)
    return protonList


def pwd_pfx(loc):
    """
        Checks if there is a prefix on current location
        Doesn't create a new one
    """
    global PROTON_PREFIX
    current_pfx = os.getcwd() + "/.proton"
    print("Checking for previous proton run: ", end="")
    if os.path.exists(current_pfx):
        print(current_pfx)
        PROTON_PREFIX = current_pfx + "/pfx"
        return current_pfx
    else:
        path = loc + "/.proton/"
        print(path)
        PROTON_PREFIX = loc + "/.proton/pfx"
        return path


def check_prev_run(loc):
    """
        Check if .proton folder exist
        Then check if last proton exec still exist
        and use it or perform new run
    """
    global PROTON_PATH
    path = pwd_pfx(loc)
    exists = os.path.isfile(path + "/last")
    if exists:
        file = open(path + "/last", "r")
        # remove all breaklines
        lastFile = file.read().replace("\n", "")
        lastProton = os.path.isfile(lastFile + "/proton")
        if lastProton:
            print("Found last Proton used: " + lastFile)
            PROTON_PATH = lastFile
            set_env()
        else:
            print("Couldn't find the proton used last time: " + lastFile)
            new_run(loc)
            set_env()
    else:
        print("No Previous run\nCreating new prefix")
        new_run(loc)
        set_env()


def new_run(loc):
    """
        Creates all .proton folders and files
        asks user what proton to use
    """
    global PROTON_PATH
    protonsFound = find_proton()
    msg = "Select Proton Version to use:\n"
    for i, text in enumerate(protonsFound, 1):
        msg += "[{}]{}\n".format(i, text)
    option = inputLoop(msg, 1, len(protonsFound))
    PROTON_PATH = "/".join(protonsFound[option].split("/")[:-1])
    if not os.path.exists(loc + "/.proton"):
        os.makedirs(loc + "/.proton")
    open(loc + "/.proton/last", "w").write(PROTON_PATH)
    if not os.path.exists(PROTON_PREFIX):
        os.makedirs(PROTON_PREFIX)


def change_proton(loc):
    """
        Asks if he wants to replace the old prefix or start a new one
        Removes last file
        Checks if there is another pfx_old and removes it
        Creates a new copy of the previous prefix
        and then exits the script
    """
    if loc == "":
        loc = os.getcwd()
    global PROTON_PREFIX
    option = inputLoop(
        "Change Proton Version:\n[1] Replace existing\n[2] Create New Prefix\n\n*The old prefix will be renamed\n**If u had another old prefix it will be removed.\n",
        1, 2)
    PROTON_PREFIX = loc + "/.proton/pfx"
    if os.path.isfile(loc + "/.proton/last"):
        os.remove(loc + "/.proton/last")
    if os.path.exists(PROTON_PREFIX + "_old"):
        shutil.rmtree(PROTON_PREFIX + "_old")
    if option:
        print("Moving pfx_old...")
        shutil.move(PROTON_PREFIX, PROTON_PREFIX + "_old")
    else:
        print("Copying pfx_old...")
        shutil.copytree(PROTON_PREFIX,
                        PROTON_PREFIX + "_old",
                        ignore=shutil.ignore_patterns("dosdevices"),
                        dirs_exist_ok=True)
    new_run(loc)
    print("All Done!")
    sys.exit(0)


def set_env():
    """
        Sets all the environment variables
    """
    print("PROTON_PREFIX:", PROTON_PREFIX)
    os.environ["PROTON_PREFIX"] = PROTON_PREFIX
    os.environ["STEAM_COMPAT_DATA_PATH"] = PROTON_PREFIX
    os.environ["STEAM_COMPAT_CLIENT_INSTALL_PATH"] = os.environ["HOME"] + "/.local/share/Steam"
    os.environ["WINEPREFIX"] = PROTON_PREFIX
    os.environ["WINEARCH"] = "win64"
    os.environ["WINE"] = PROTON_PATH + "/dist/bin/wine64"
    os.environ["WINESERVER"] = PROTON_PATH + "/dist/bin/wineserver"


def run(target):
    """
        Checks if locations is empty and sets the current location instead
        Then it will put all the arguments on the proton and start the
        execution
    """
    _exec = "'" + PROTON_PATH + "/proton' run " + target
    print("Executing: " + _exec)
    os.system(_exec)


def ifloc():
    """
        Checks if there is a path on argument 2
        and returns it or ignores it if it doesnt exists
    """
    if len(sys.argv) > 2:
        loc = os.path.realpath(sys.argv[2])
        if os.path.exists(loc):
            print("Running in location: " + loc)
            return loc
    return ""


if __name__ == "__main__":
    # Files to run proton
    filetypes = [".exe", ".msi"]
    if len(sys.argv) > 1:
        if any(i in sys.argv[1] for i in filetypes):
            # Full path from exe
            target = os.path.realpath(sys.argv[1])
            check_prev_run(os.path.dirname(target))
            run("'" + target + "' " + " ".join(sys.argv[2:]))
        elif "wine" in sys.argv[1]:
            check_prev_run(os.getcwd())
            run(sys.argv[1])
        elif "change" in sys.argv[1]:
            change_proton(ifloc())
        else:
            print("Not sure what you are trying to do  right now...")
    else:
        script = sys.argv[0].split("/").pop()
        print(
            "Available arguments:\n\n\n" + script + " game.exe\n" + script +
            " winecfg/winetricks\n" + script + " change\n\n",
            "\nIf u dont provide the location on winecfg/winetricks or on change,",
            "\nthe script will start on current location")

